[tox]
minversion=3.2.4
envlist=linters, integrations, docs, mysql, postgres

[main]
dbuser = admin
dbpasswd = adminpass
db = rgsync

[docker:mysql]
image = mysql:8
healthcheck_cmd = sleep 15
ports =
    3306:3306/tcp
environment =
    MYSQL_ROOT_PASSWORD=adminadmin
    MYSQL_USER={[main]dbuser}
    MYSQL_PASSWORD={[main]dbpasswd}
    MYSQL_DATABASE={[main]db}

[docker:mongo]
name = mongo
image = mongo:4
ports =
    27017:27017/tcp
environment =
    MONGO_INITDB_ROOT_USERNAME={[main]dbuser}
    MONGO_INITDB_ROOT_PASSWORD={[main]dbpasswd}
    MONGO_DB={[main]db}

[docker:redisgears]
name = redisgears
image = redislabs/redisgears:edge
volumes =
    bind:rw:{toxinidir}:/build
ports =
    6379:6379/tcp

[docker:postgres]
image = postgres:13
healthcheck_cmd = sleep 15
ports =
    5432:5432/tcp
environment =
    POSTGRES_USER={[main]dbuser}
    POSTGRES_PASSWORD={[main]dbpasswd}
    POSTGRES_DB={[main]db}

[flake8]
max-complexity = 10
filename = ./redisplus/**
ignore = W292, E501
exclude = src/conftest.py
show-source = true

# mysql recipe
[testenv:mysql]
docker =
    {envname}
    redisgears
allowlist_externals =
    docker
pre_commands =
    rm -rf dist
    poetry build
commands =
    pytest -m {envname} -s

# run postgres tests
[testenv:postgres]
docker =
    {envname}
    redisgears
pre_commands =
    rm -rf dist
    poetry build
commands =
    pytest -m {envname}

[testenv:mongo]
docker =
    {envname}
    redisgears
pre_commands =
    rm -rf dist
    poetry build
commands =
    pytest -m {envname}