[tox]
skipsdist = True

[flake8]
max-complexity = 10
ignore = E127,E265,E266,E301,E501
srcdir = redisbloom
show-source = true
exclude =.git,.tox,dist,doc,*/__pycache__/*,*test*.py

[docker:mysql]
image = mysql:5
ports = 3306:3306/tcp
environment =
    MYSQL_ROOT_PASSWORD=password
volumes =
    bind:ro:{toxinidir}:/build

[docker:redis]
image = redislabs/redisgears:edge
ports = 6379:6379/tcp
volumes =
    bind:rw:{toxinidir}:/build

[docker:postgres]
image = postgres:13
ports = 5432:5432/tcp
environment =
    POSTGRES_PASSWORD=demo
    POSTGRES_USER=demo
    POSTGRES_DB=demo
volumes =
    bind:ro:{toxinidir}:/build

[testenv:mysql]
allowlist_externals =
    docker
docker =
    mysql
    redis
commands_pre =
    # configure redis
    docker exec -it redis apt-get update -qqq
    docker exec -it redis apt-get install -qqq -y python3 python3-pip
    docker exec -it redis pip3 install --upgrade -q poetry
    docker exec -w /build -it redis poetry config virtualenvs.create false
    docker exec -w /build -it redis poetry install

    # configure mysql
    docker exec -it mysql /build/sbin/setup-mysql

commands =
    # run the test
    docker exec -w /build -it redis python3 testWriteBehind.py

[testenv:postgres]
allowlist_externals =
    docker
docker =
    postgres
    redis
commands_pre =
    # configure redis
    docker exec -it redis apt-get update -qqq
    docker exec -it redis apt-get install -qqq -y python3 python3-pip
    docker exec -it redis pip3 install --upgrade -q poetry
    docker exec -w /build -it redis poetry config virtualenvs.create false
    docker exec -w /build -it redis poetry install

    # configure postgres
    docker exec -it postgres /build/sbin/setup-postgres

commands =
    # run the test
    #docker exec -w /build -it redis python3 testWriteBehind.py
    docker exec -w /build -it redis python3 testps.py


[testenv:linters]
commands =
  flake8 --show-source
  vulture rgsync --min-confidence 80
  bandit rgsync/**
